API Documentation
= API : Application Programming Interface
        라이브러리

= JAVA SE ; Standard Edition ; 데스크탑 어플리케이션 개발 => 지금쓰고있는
=      EE ; Enterprise Edition ; 기업용 어플리케이션 개발 => 웹 개발

- 주요 클래스 ( 1,2 를 주로 사용)
1) 문자열: String(+StringBuffer)
2) 날짜/시간 : Date(java.util), LocalDate/LocalTime/LocalDateTime
3) 수학 : Math
4) 키보드 입력 : Scanner
5) 컬렉션 프레임워크 : 자료구조 개념이 적용된 클래스
        데이터를 저장하는 여러가지 다양한 방식의 클래스가 모여있다

    Collection 인터페이스
        ^(상속)        ^(상속)
        |              |
        |              |
        |              |
List 인터페이스 Set 이너페이스

Map 인터페이스 (따로)
-------------------------------------------------------------

List : (중복허용) 순서가 있는 데이터의 집합(DB)
        구현 클래스 - ArrayList, LinkedList, Stack, Vector, ...
        1) ArrayList == 배열
        2) LinkedList 
        배열 구조의 단점 : 
                - 크기 변경이 불가 : 실행 속도의 향상을 위해서 큰 크기의 배열을 생성해야 함(메모리 낭비)
                - 비순차적인 데이터의 추가 또는 삭제에 시간이 많이 걸림
                        -차례대로 데이터를 추가하고 마지막에서부터 데이터를 삭제하는 것은 빠름
                        - 배열의 주간에 데이터를 추가하귀 위해 빈 자리를 만들고 다른 데이터를 복사하여 이동하는데 시간이 소요됨
        3) Stack 과 Queue
        - Stack : LIFO(Last in First Out)구조
        - Queue : FIFO(First in First Out)구조



Set : (중복허용안함) 순서를 유지하지 않는 데이터 집합(DB) => index 개념 없음
        구현 클래스 - HashSet, TreeSet(지금은건너뜀), ...
        Set = Interface (new 로 생성해야함, add remove 똑같이 사용함 = collection 상속받았기 때문)


Map : 키와 값의 쌍으로 이루어진 데이터 집합(DB)
        순서 유지 안함
        키 중복 불가, 값은 중복 허용
        구현 클래스 - HashMap, TreeMap, ...

Arrays :  배열을 다루는 데 유용한 메소드 정의되어있음
- Arrays.toString()
- sort(), binarySearch()


Iterator(interface) : 컬렉션에 저장된 요소 접근 시 사용
                        컬렉션에 저장된 요소들을 읽어오는 방법 표준화
                        구 버전으로 Enumeration
                        hasNext() / next() / remove()
                        




