-클래스 상속
기존의 클래스를 재사용하여 새로운 클래스 작성
코드의 재사용성 높아지고, 중복 제거 가능

- 상속이 가능한 것들
1) 멤버 변수
2) 메소드

- 상속 불가한 것들
1) 생성자, 포기화 블럭은 상속 X
- 자손 클래스의 멤버개수는 조상 클레스보다 항상 많거나 같다
-TODO: 자손 클래스의 멤버 개수는 조상 클래스보다 많거나, 같다.
    => 고로, 자손 클래스가 훨씬 큰 개념(부모+자신 이기 때문)

-TODO: 단일 상속만 가능 (여러개 받을 수 없다)
class A extends B{}



조상 클래스: 부모, 상위(super), 기반(base) 클래스
자손 클래스: 자식, 하위 (sub), 파생된 (derived) 클래스

- 클래스간의 관계(맺는다면.. 종류는 다음과 같다)
1) 상속관계 : (is a 관계) 
2) 포함관계 : (has a 관계)
    예)
        원은 점이다: Circle extends Point 
        원은 점을 가지고 있다 : class Circle {point p = new Point()};

원은 도형이다 => ok 상속관계

//TODO: 개념 되짚기
오버로딩 : 하나의 클래스에 같은 이름의 생성자(또는 메소드)가 여러 개 존재
(상속관계)오버라이딩 : 상속관계에서만 나옴
                        자식클래스 에서 부모클래스의 "메소드"를 재정의 하는 것
                        @Override 어노테이션 사용

//TODO: 모든 클래스의 조상 : Object
    - 모든 클래스의 상속 계층도의 최상위에 위치
    - 자동으로 상속받는다 (어디서든 사용 가능)
    예) toString(), equals(),... 자동 상속됨



